name: 'Publish Symbols'
description: 'Indexes and publishes PDB symbol files similar to Azure DevOps PublishSymbols@2.'

inputs:
  SymbolsPath:
    description: 'Target path to copy the generated symbols package.'
    required: false
    default: ' '
  SearchPattern:
    description: 'Pattern to search for PDB files.'
    required: true
    default: '**\\bin\\**\\*.pdb'
  SymbolsFolder:
    description: 'Root folder where symbol search starts.'
    required: false
    default: ' '
  SkipIndexing:
    description: 'Set to True to skip source indexing.'
    required: false
    default: 'False'
  TreatNotIndexingAsWarning:
    description: 'True to only warn if indexing fails.'
    required: false
    default: 'False'
  SymbolsVersion:
    description: 'Version metadata for the symbols.'
    required: false
    default: ' '
  SymbolsProduct:
    description: 'Product metadata for the symbols.'
    required: false
    default: ' '
  SymbolsArtifactName:
    description: 'Artifact name for the packaged symbols.'
    required: false
    default: 'Symbols_Release'

runs:
  using: "composite"
  steps:
    - name: Publish and Index Symbols
      shell: pwsh
      run: |
        $ErrorActionPreference = "Stop"
        Write-Host "üöÄ Starting Symbol Publish Process..."

        $SYMBOLS_PATH = "${{ inputs.SymbolsPath }}"
        $SEARCH_PATTERN = "${{ inputs.SearchPattern }}"
        $SYMBOLS_FOLDER = "${{ inputs.SymbolsFolder }}"
        $SKIP_INDEXING = "${{ inputs.SkipIndexing }}"
        $WARN_ON_INDEX_FAIL = "${{ inputs.TreatNotIndexingAsWarning }}"
        $SYMBOLS_VERSION = "${{ inputs.SymbolsVersion }}"
        $SYMBOLS_PRODUCT = "${{ inputs.SymbolsProduct }}"
        $ARTIFACT_NAME = "${{ inputs.SymbolsArtifactName }}"

        Write-Host "üîç Searching for PDBs in folder: $SYMBOLS_FOLDER with pattern: $SEARCH_PATTERN"
        Set-Location $SYMBOLS_FOLDER
        $PDB_FILES = Get-ChildItem -Recurse -Include *.pdb

        if (-not $PDB_FILES) {
            Write-Host "‚ö†Ô∏è No PDB files found!"
            exit 0
        }

        Write-Host "üóÇ Found PDB files:"
        $PDB_FILES | ForEach-Object { Write-Host " - $($_.FullName)" }

        # === SOURCE INDEXING SECTION ===
        if ($SKIP_INDEXING -eq "False") {
            Write-Host "üìå Attempting source indexing..."
            $pdbstr = "${env:ProgramFiles(x86)}\Windows Kits\10\Debuggers\x64\srcsrv\pdbstr.exe"
            if (Test-Path $pdbstr) {
                foreach ($pdb in $PDB_FILES) {
                    Write-Host "üìÑ Checking $pdb for SRCSRV stream..."
                    $result = & $pdbstr -r -p:$pdb.FullName -s:srcsrv 2>$null
                    if ($LASTEXITCODE -eq 0 -and $result) {
                        Write-Host "‚úÖ $pdb already contains source server data."
                    } else {
                        Write-Host "‚ùå $pdb not indexed. Adding dummy SRCSRV data..."
                        $tempFile = "$env:TEMP\srcsrv.txt"
                        'SRCSRV: ini ------------------------------------------------
        VERSION=1
        INDEXVERSION=2
        SRCSRV: variables ------------------------------------------
        SRCSRVTRG=%var2%
        SRCSRVCMD=cmd /c echo %var2%
        SRCSRV: source files ---------------------------------------
        dummy.c*D:\repo\dummy.c
        SRCSRV: end ------------------------------------------------' | Out-File $tempFile -Encoding ASCII
                                & $pdbstr -w -p:$pdb.FullName -i:$tempFile -s:srcsrv
                                if ($LASTEXITCODE -eq 0) {
                                    Write-Host "‚úÖ SRCSRV indexing added to $pdb."
                                } else {
                                    if ($WARN_ON_INDEX_FAIL -eq "True") {
                                        Write-Warning "‚ö†Ô∏è Failed to index $pdb, continuing..."
                                    } else {
                                        throw "‚ùå Failed to index $pdb."
                                    }
                                }
                            }
                        }
                    } else {
                        Write-Warning "‚ö†Ô∏è pdbstr.exe not found. Skipping real indexing."
                    }
                } else {
                    Write-Host "‚è≠Ô∏è Skipping source indexing as requested."
                }
        
                # === PACKAGE SYMBOLS ===
                $ZIP_NAME = "$ARTIFACT_NAME.zip"
                Write-Host "üì¶ Creating package: $ZIP_NAME"
                Compress-Archive -Path $PDB_FILES.FullName -DestinationPath $ZIP_NAME -Force
        
                if ($SYMBOLS_PATH -and $SYMBOLS_PATH -ne " ") {
                    Write-Host "üìÇ Copying package to: $SYMBOLS_PATH"
                    New-Item -ItemType Directory -Force -Path $SYMBOLS_PATH | Out-Null
                    Copy-Item $ZIP_NAME -Destination $SYMBOLS_PATH -Force
                }
        
                Write-Host "‚úÖ Symbols packaged successfully as $ZIP_NAME"
                Write-Host "‚ÑπÔ∏è Metadata ‚Üí Product: $SYMBOLS_PRODUCT | Version: $SYMBOLS_VERSION"
        
