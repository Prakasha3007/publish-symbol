name: 'Publish Symbols'
description: 'Indexes and publishes PDB symbol files with GitHub raw source mapping, replicating TFS PublishSymbols@2 behavior.'

inputs:
  SymbolsPath:
    description: 'Target path to copy the generated symbols package.'
    required: false
    default: ' '
  SearchPattern:
    description: 'Pattern to search for PDB files.'
    required: true
    default: '**\bin\**\*.pdb'
  SymbolsFolder:
    description: 'Root folder where symbol search starts.'
    required: false
    default: './'
  SkipIndexing:
    description: 'Set to True to skip source indexing.'
    required: false
    default: 'False'
  TreatNotIndexingAsWarning:
    description: 'True to only warn if indexing fails.'
    required: false
    default: 'False'
  SymbolsVersion:
    description: 'Version metadata for the symbols.'
    required: false
    default: ' '
  SymbolsProduct:
    description: 'Product metadata for the symbols.'
    required: false
    default: ' '
  SymbolsArtifactName:
    description: 'Artifact name for the packaged symbols.'
    required: false
    default: 'Symbols_Release'

runs:
  using: "composite"
  steps:
    - name: Publish and Index Symbols
      shell: pwsh
      run: |
        $ErrorActionPreference = "Stop"
        Write-Host "Starting Symbol Publish Process..."

        $SYMBOLS_PATH = "${{ inputs.SymbolsPath }}"
        $SEARCH_PATTERN = "${{ inputs.SearchPattern }}"
        $SYMBOLS_FOLDER = "${{ inputs.SymbolsFolder }}"
        $SKIP_INDEXING = "${{ inputs.SkipIndexing }}"
        $WARN_ON_FAIL = "${{ inputs.TreatNotIndexingAsWarning }}"
        $VERSION = "${{ inputs.SymbolsVersion }}"
        $PRODUCT = "${{ inputs.SymbolsProduct }}"
        $ARTIFACT_NAME = "${{ inputs.SymbolsArtifactName }}"

        if ([string]::IsNullOrWhiteSpace($SYMBOLS_FOLDER)) { $SYMBOLS_FOLDER = "./" }

        Write-Host "Searching for PDBs in $SYMBOLS_FOLDER matching $SEARCH_PATTERN"

        # Match only bin PDBs, exclude obj explicitly
        $pdbFiles = Get-ChildItem -Path $SYMBOLS_FOLDER -Recurse -Include *.pdb |
            Where-Object { $_.FullName -match "\\bin\\" -and $_.FullName -notmatch "\\obj\\" }

        if (-not $pdbFiles) {
          Write-Host " No PDB files found in bin folders. Exiting."
          exit 0
        }

        Write-Host "Found PDB files:"
        $pdbFiles | ForEach-Object { Write-Host " - $($_.FullName)" }

        # Locate pdbstr.exe
        $pdbstrPaths = @(
          "C:\Program Files (x86)\Windows Kits\10\Debuggers\x64\srcsrv\pdbstr.exe",
          "C:\Program Files (x86)\Windows Kits\10\Debuggers\x86\srcsrv\pdbstr.exe"
        )
        $pdbstr = $pdbstrPaths | Where-Object { Test-Path $_ } | Select-Object -First 1
        if (-not $pdbstr) {
          Write-Warning "pdbstr.exe not found. Real indexing will be skipped."
          exit 1
        }

        if ($SKIP_INDEXING -eq "False") {
          foreach ($pdb in $pdbFiles) {
            Write-Host "Indexing $pdb ..."
            $srcsrvFile = Join-Path $pdb.DirectoryName "srcsrv.srcsrv"

            # Build SRCSRV file dynamically
            $repo = $env:GITHUB_REPOSITORY
            $commit = $env:GITHUB_SHA
            $header = @"
        SRCSRV: ini ------------------------------------------------
        VERSION=1
        VERCTRL=GitHub
        DATETIME=$(Get-Date -Format "yyyy-MM-dd HH:mm:ss")
        SRCSRV: variables ------------------------------------------
        GIT_REPO=https://raw.githubusercontent.com/$repo/$commit
        SRCSRVTRG=%GIT_REPO%/%var2%
        SRCSRVCMD=
        SRCSRV: source files ---------------------------------------
        "@
                    $footer = "SRCSRV: end ------------------------------------------------"
        
                    # Map only source files under repository
                    $mappings = @()
                    Get-ChildItem -Path $SYMBOLS_FOLDER -Recurse -Include *.cs,*.cpp,*.h | ForEach-Object {
                      $relPath = $_.FullName.Replace((Resolve-Path $SYMBOLS_FOLDER), "").TrimStart('\').Replace('\','/')
                      $mappings += "$($_.FullName)*$relPath"
                    }
        
                    $header | Out-File $srcsrvFile -Encoding ASCII
                    $mappings | Out-File $srcsrvFile -Encoding ASCII -Append
                    $footer | Out-File $srcsrvFile -Encoding ASCII -Append
        
                    # Inject SRCSRV into PDB
                    & "$pdbstr" -w -p:"$pdb" -i:"$srcsrvFile" -s:srcsrv
                    if ($LASTEXITCODE -eq 0) {
                      Write-Host "SRCSRV indexing added to $pdb"
                    } else {
                      if ($WARN_ON_FAIL -eq "True") { Write-Warning "Failed to index $pdb"; } else { exit 1 }
                    }
                  }
                } else {
                  Write-Host "Skipping source indexing as requested."
                }
        
                # Package final PDBs
                $zipName = "$ARTIFACT_NAME.zip"
                Write-Host "Creating symbols package $zipName"
                Compress-Archive -Path $pdbFiles.FullName -DestinationPath $zipName -Force
        
                if ($SYMBOLS_PATH -and $SYMBOLS_PATH -ne " ") {
                  New-Item -ItemType Directory -Force -Path $SYMBOLS_PATH | Out-Null
                  Copy-Item $zipName -Destination $SYMBOLS_PATH -Force
                }
        
                Write-Host "Symbols packaged successfully → $zipName"
                Write-Host "Metadata → Product: $PRODUCT | Version: $VERSION"
